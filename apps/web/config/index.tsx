import { cookieStorage, createStorage } from "wagmi"; // Use 'wagmi' directly (Wagmi v2+)
import { WagmiAdapter } from "@reown/appkit-adapter-wagmi";
import { bsc, bscTestnet } from "@reown/appkit/networks";
import type { Chain } from "viem"; // Import Chain type for explicit typing

// Define localhost/hardhat chain
const localhost = {
  id: 31337,
  name: "Localhost",
  nativeCurrency: {
    decimals: 18,
    name: "Ether",
    symbol: "ETH",
  },
  rpcUrls: {
    default: {
      http: ["http://127.0.0.1:8545"],
    },
  },
} as const satisfies Chain;

// Read Project ID from environment variables
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;

// Ensure Project ID is defined at build time
if (!projectId) {
  throw new Error(
    "NEXT_PUBLIC_PROJECT_ID is not defined. Please set it in .env.local"
  );
}

// Get network from environment variable
const networkEnv = process.env.NEXT_PUBLIC_NETWORK || "localhost";

// Network mapping
const networkMap: Record<string, Chain> = {
  localhost,
  bscTestnet,
  bsc,
};

// Get the single network to use
const selectedNetwork = networkMap[networkEnv];
if (!selectedNetwork) {
  throw new Error(
    `Invalid NEXT_PUBLIC_NETWORK value: ${networkEnv}. Must be one of: localhost, bscTestnet, bsc`
  );
}

// Use only the selected network
export const networks: [Chain, ...Chain[]] = [selectedNetwork];

// Export current network info for debugging
export const currentNetwork = {
  name: networkEnv,
  chain: selectedNetwork,
  chainId: selectedNetwork.id,
};

// Create the Wagmi adapter instance
export const wagmiAdapter = new WagmiAdapter({
  storage: createStorage({ storage: cookieStorage }), // Use cookieStorage for SSR
  ssr: true, // Enable SSR support
  projectId,
  networks, // Pass the single network
});

// Export the Wagmi config generated by the adapter
export const config = wagmiAdapter.wagmiConfig;
