import fs from "fs";
import path from "path";

interface ContractAddresses {
  VAI_TOKEN: string;
  MEMBERSHIP: string;
  BOOTSTRAP_BAY: string;
}

export function setupLocalEnv(addresses: ContractAddresses) {
  const webEnvPath = path.join(__dirname, "../../web/.env.local");

  const envContent = `# Local Development Environment Variables
# Generated by setup-local-env.ts

# Project ID for WalletConnect
NEXT_PUBLIC_PROJECT_ID=f7c0b453a4b0ad309e64b1a5c5bfc17a

# VAI Protocol Contract Addresses
NEXT_PUBLIC_VAI_TOKEN=${addresses.VAI_TOKEN}
NEXT_PUBLIC_MEMBERSHIP=${addresses.MEMBERSHIP}
NEXT_PUBLIC_BOOTSTRAP_BAY=${addresses.BOOTSTRAP_BAY}
`;

  // Create directory if it doesn't exist
  const webDir = path.dirname(webEnvPath);
  if (!fs.existsSync(webDir)) {
    fs.mkdirSync(webDir, { recursive: true });
  }

  // Write environment file
  fs.writeFileSync(webEnvPath, envContent);

  console.log("\n‚úÖ Created .env.local for web app");
  console.log("üìÅ Location:", webEnvPath);
  console.log("\nüîë Contract Addresses:");
  console.log("VAI Token:", addresses.VAI_TOKEN);
  console.log("Membership:", addresses.MEMBERSHIP);
  console.log("Bootstrap Bay:", addresses.BOOTSTRAP_BAY);
  console.log("\nüí° These addresses will work with any network");
  console.log("‚ö†Ô∏è  Remember to set your NEXT_PUBLIC_PROJECT_ID if needed!");
}

export default setupLocalEnv;
